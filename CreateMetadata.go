// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dialect

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateMetadata is the `createMetadata` instruction.
type CreateMetadata struct {
	MetadataNonce *uint8

	// [0] = [WRITE, SIGNER] user
	//
	// [1] = [WRITE] metadata
	//
	// [2] = [] rent
	//
	// [3] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateMetadataInstructionBuilder creates a new `CreateMetadata` instruction builder.
func NewCreateMetadataInstructionBuilder() *CreateMetadata {
	nd := &CreateMetadata{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetMetadataNonce sets the "metadataNonce" parameter.
func (inst *CreateMetadata) SetMetadataNonce(metadataNonce uint8) *CreateMetadata {
	inst.MetadataNonce = &metadataNonce
	return inst
}

// SetUserAccount sets the "user" account.
func (inst *CreateMetadata) SetUserAccount(user ag_solanago.PublicKey) *CreateMetadata {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(user).WRITE().SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *CreateMetadata) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMetadataAccount sets the "metadata" account.
func (inst *CreateMetadata) SetMetadataAccount(metadata ag_solanago.PublicKey) *CreateMetadata {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(metadata).WRITE()
	return inst
}

// GetMetadataAccount gets the "metadata" account.
func (inst *CreateMetadata) GetMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetRentAccount sets the "rent" account.
func (inst *CreateMetadata) SetRentAccount(rent ag_solanago.PublicKey) *CreateMetadata {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *CreateMetadata) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CreateMetadata) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateMetadata {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CreateMetadata) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst CreateMetadata) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateMetadata,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateMetadata) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateMetadata) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MetadataNonce == nil {
			return errors.New("MetadataNonce parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Metadata is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CreateMetadata) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateMetadata")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("MetadataNonce", *inst.MetadataNonce))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         user", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     metadata", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         rent", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj CreateMetadata) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MetadataNonce` param:
	err = encoder.Encode(obj.MetadataNonce)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateMetadata) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MetadataNonce`:
	err = decoder.Decode(&obj.MetadataNonce)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateMetadataInstruction declares a new CreateMetadata instruction with the provided parameters and accounts.
func NewCreateMetadataInstruction(
	// Parameters:
	metadataNonce uint8,
	// Accounts:
	user ag_solanago.PublicKey,
	metadata ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CreateMetadata {
	return NewCreateMetadataInstructionBuilder().
		SetMetadataNonce(metadataNonce).
		SetUserAccount(user).
		SetMetadataAccount(metadata).
		SetRentAccount(rent).
		SetSystemProgramAccount(systemProgram)
}
