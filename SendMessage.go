// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dialect

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SendMessage is the `sendMessage` instruction.
type SendMessage struct {
	DialectNonce *uint8
	Text         *[]byte

	// [0] = [WRITE, SIGNER] sender
	//
	// [1] = [WRITE] dialect
	//
	// [2] = [] rent
	//
	// [3] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSendMessageInstructionBuilder creates a new `SendMessage` instruction builder.
func NewSendMessageInstructionBuilder() *SendMessage {
	nd := &SendMessage{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetDialectNonce sets the "dialectNonce" parameter.
func (inst *SendMessage) SetDialectNonce(dialectNonce uint8) *SendMessage {
	inst.DialectNonce = &dialectNonce
	return inst
}

// SetText sets the "text" parameter.
func (inst *SendMessage) SetText(text []byte) *SendMessage {
	inst.Text = &text
	return inst
}

// SetSenderAccount sets the "sender" account.
func (inst *SendMessage) SetSenderAccount(sender ag_solanago.PublicKey) *SendMessage {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(sender).WRITE().SIGNER()
	return inst
}

// GetSenderAccount gets the "sender" account.
func (inst *SendMessage) GetSenderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetDialectAccount sets the "dialect" account.
func (inst *SendMessage) SetDialectAccount(dialect ag_solanago.PublicKey) *SendMessage {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(dialect).WRITE()
	return inst
}

// GetDialectAccount gets the "dialect" account.
func (inst *SendMessage) GetDialectAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetRentAccount sets the "rent" account.
func (inst *SendMessage) SetRentAccount(rent ag_solanago.PublicKey) *SendMessage {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *SendMessage) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *SendMessage) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *SendMessage {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *SendMessage) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst SendMessage) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SendMessage,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SendMessage) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SendMessage) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.DialectNonce == nil {
			return errors.New("DialectNonce parameter is not set")
		}
		if inst.Text == nil {
			return errors.New("Text parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Sender is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Dialect is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *SendMessage) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SendMessage")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("DialectNonce", *inst.DialectNonce))
						paramsBranch.Child(ag_format.Param("        Text", *inst.Text))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       sender", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("      dialect", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         rent", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj SendMessage) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DialectNonce` param:
	err = encoder.Encode(obj.DialectNonce)
	if err != nil {
		return err
	}
	// Serialize `Text` param:
	err = encoder.Encode(obj.Text)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SendMessage) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DialectNonce`:
	err = decoder.Decode(&obj.DialectNonce)
	if err != nil {
		return err
	}
	// Deserialize `Text`:
	err = decoder.Decode(&obj.Text)
	if err != nil {
		return err
	}
	return nil
}

// NewSendMessageInstruction declares a new SendMessage instruction with the provided parameters and accounts.
func NewSendMessageInstruction(
	// Parameters:
	dialectNonce uint8,
	text []byte,
	// Accounts:
	sender ag_solanago.PublicKey,
	dialect ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *SendMessage {
	return NewSendMessageInstructionBuilder().
		SetDialectNonce(dialectNonce).
		SetText(text).
		SetSenderAccount(sender).
		SetDialectAccount(dialect).
		SetRentAccount(rent).
		SetSystemProgramAccount(systemProgram)
}
